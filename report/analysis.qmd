# Analysis

```{r, echo = FALSE, message = FALSE}
source(here::here("scripts/setup.R"))
```

## Genre Analysis

We now consider the impact of the genres on Movies. The first plot below already indicates all genres we have in our data set with respect to gross.

```{r Analysis : Genre & Gross, out.width="1800px"}
  movies |>
    mutate(
      genre = if_else(genre=="Musical","MuL",genre),
      genre = if_else(genre!="MuL",substr(genre,1,3),"MuL")) |>
    group_by(genre,year) |>
    summarise(TotalGross = sum(gross_CPI_adjusted , na.rm = T),
              .groups = "keep") |>
    ggplot(aes( x = year, y = TotalGross)) +
      geom_point() +
      geom_smooth(formula = y ~ x,
                  method = "loess") +
      theme(axis.ticks.x = element_blank(),
            axis.text.x=element_blank()) +
      facet_grid(~genre) +
      labs(title = "Current best genres to make a movie in are Action,\nAdventure & Comedy.",
           subtitle = "On the other hand genres like War, History, Music & Sport seem\nto have stagnated / decresed in popularity.",
           x = "Year for each genre (1920-2023)",
          y = "Total Gross") +
    scale_y_continuous(limits = c(0, NA),oob = squish)
```
(Act : Action, Adv : Adventure, Ani : Animation, Bio : Biography, Com : Comedy, Cri : Crime, Dra : Drama, Fam : Family, Fan : Fantasy, Fil : Film-Noir, His : History, Hor : Horror, MuL : Musical, Mus : Music, Mys  Mystery, Rom : Romance, Sci : Sci-Fi, Spo : Sport, Thr : Thriller, Wes : Western)

The graphical representation clearly indicates that Action, Adventure, and Comedy are the most prevalent and lucrative genres within the realm of filmmaking. Consequently, these categories hold great promise for filmmakers seeking commercial success. Conversely, genres such as Horror, Thriller, and Sci-Fi exhibit an emerging popularity and offer studios a promising avenue for exploration.

The genre of Drama, with its intrinsic ability to intermingle with various other genres, naturally mirrors the trends set by these other categories. This adaptability allows it to remain a pertinent genre in alignment with evolving audience preferences.

In examining the less profitable genres, it is discernible that the War genre has witnessed a decline in popularity since the mid-20th century, conceivably due to its waning relevance as a subject matter in contemporary times. In the case of History, it appears that the market has reached a point of saturation, as the vast majority of significant historical events have been exhaustively documented. Genres like Biography and Western, by contrast, occupy a niche space within the cinematic landscape, appealing to a more limited audience segment and consequently offering diminished potential for trending success.

The overarching conclusion drawn from this analysis is that genres such as Action, Adventure, and Comedy notably enhance the prospects of achieving financial success in the realm of filmmaking.

```{r Creating : Runtime Bins dataframe}
Runtime_lenght_bins_df <- movies |> 
  filter(run_time > 0) |>
  mutate(runtime_bins = as.factor(run_time %/% 60)) |>
  mutate(runtime_bins = fct_recode(runtime_bins,
                                   "Very Short" = "0", # up to 59 min
                                   "Short" = "1",      # 60-119 min 
                                   "Average" = "2",    # 120-179 min
                                   "Long" = "3",       # up to 4h 
                                   "Very Long" = "4",  # up to 5h and more...
                                   "Very Long" = "5",
                                   "Very Long" = "6",
                                   "Very Long" = "7")) |>
  select(title , year , run_time , runtime_bins , gross_CPI_adjusted ,
         rating , metascore , genre) |>
  distinct(title , .keep_all = TRUE)
```

```{r Creating : rating_joined_runtime_df}
yearly_avg_rating_df <- Runtime_lenght_bins_df |> 
  select(year,rating,genre) |>
  group_by(year) |>
  summarise(yearly_AVG_rating = mean(rating , na.rm = T))

bin_avg_rating_df<-Runtime_lenght_bins_df |>
  select(runtime_bins,year,rating,genre) |>
  group_by(runtime_bins,year) |>
  summarise(bin_AVG_rating = mean(rating , na.rm = T), 
            .groups = "drop")
# creating the df that has both types of average rating to find out how the trend behaves
rating_joined_runtime_df <- left_join(bin_avg_rating_df , yearly_avg_rating_df,
                               join_by(year)) 

#Creating rating_joined_df_with_genre :
yearly_avg_rating_by_genre <- Runtime_lenght_bins_df |>
  select(year , rating , genre) |>
  group_by(year , genre) |>
  summarise(yearly_AVG_rating = mean(rating , na.rm = T),
            .groups = "drop")

bin_avg_rating_by_genre <- Runtime_lenght_bins_df |>
  select(runtime_bins , year , rating , genre) |>
  group_by(runtime_bins , year , genre) |>
  summarise(bin_AVG_rating = mean(rating , na.rm = T), 
            .groups = "drop")
# creating the df that has both types of average rating & genre to find out how the trend behaves
rating_joined_df_with_genre <- left_join(bin_avg_rating_by_genre , 
                                  yearly_avg_rating_by_genre,
                                  join_by(year , genre)) 
```

```{r Analysis : Rating deviation trend}
suppressWarnings({print(
  rating_joined_df_with_genre |>
  group_by(runtime_bins,genre,year) |>
  #filter(genre != "Western"& genre !="Thriller" & genre !="Crime",genre !="Drama",genre !="Family",genre !="Biography", genre !="Musical") |>
  summarise(AVG_rating_excl_trend = yearly_AVG_rating - bin_AVG_rating,
            .groups = "keep") |>
  ggplot(aes( x = year , y = AVG_rating_excl_trend)) +
    geom_smooth(aes(color = genre), se =FALSE,
                formula = y ~ x, method = "loess") +
    labs(title = "Could attention span be the reason of the decrese in ratings ?",
    subtitle = "Action, Adventure & Comedy seem to rise again. Sci-Fi, Romance \n& Mystery remained constant.",
         x = "Year",
         y = "Average rating deviation trend",
         color = "Genre") +
    coord_cartesian(xlim = c(1915 , 2025)) +
    scale_x_continuous(breaks = seq(1915 , 2025 , 6)) +
    theme(axis.text.x = element_text(angle = 45, hjust = 1),
          legend.position = "bottom")
)})
# suppressing warnings with regards to geom_smooth
```

This graphic provides an illustrative depiction of the annual average rating deviation from the normative rating associated with specific run-time intervals. Notably, there has been a discernible decline in movie ratings since the 1970s. This decline may be attributed to a variety of factors, such as a decreasing collective attention span or elevated expectations regarding the optimal duration of a movie.

This intriguing trend is pervasive across multiple genres, with adventure and comedy experiencing a resurgence in recent years. This resurgence is in alignment with our prior observations when assessing genre-specific profitability trends.

In contrast, genres such as Sci-Fi, Mystery, and Romance have maintained a consistent trajectory over the years. One plausible explanation for this constancy is the niche appeal of these genres, catering to dedicated fan bases with specific expectations regarding both content and duration. As a result, these genres tend to exhibit more stability in their ratings over time.

## Run time Analysis

```{r Analysis : Attention span}
rating_joined_runtime_df |>
  group_by(runtime_bins,year) |>
  summarise(AVG_rating_excl_trend = yearly_AVG_rating - bin_AVG_rating,
            .groups = "keep") |>
  ggplot(aes( x = year , y = AVG_rating_excl_trend)) +
    geom_point(aes(shape = runtime_bins,
                   color = runtime_bins)) +
    geom_smooth(aes(color = runtime_bins), se =FALSE,
                formula = y ~ x,
                method = "loess") +
    labs(title = "Attention span seem to decrese over time.",
         subtitle = "Films between 60 to 120 min seem to have gained popularity.",
         x = "Year",
         y = "Average Rating Excluding the trend",
         color = "Run time",
         shape = "Run time") +
    coord_cartesian(xlim = c(1915 , 2025)) +
    scale_x_continuous(breaks = seq(1915 , 2025 , 6)) +
    theme(axis.text.x = element_text(angle = 45, hjust=1),
          legend.position = "bottom")
```
("Very Short" : 0-59min, "Short" : 60-119min, "Average" : 120-179min, "Long" : 180-239min, "Very Long" : 4h & more )

Upon eliminating the influence of rating trend deviations, a more evident pattern emerges. Notably, the majority of run-time categories exhibit a negative impact on movie ratings, with one notable exception being the category encompassing movies with a run time falling between 60 and 119 minutes, denoted as "Short" run time in the graphic.

The extensive rating fluctuations observed in very short movies are, in all likelihood, an outcome of overfitting stemming from a limited dataset. Moreover, the persistently negative trend observed in this category from the 1980s onward may be attributed to the audience's perception that such brief cinematic experiences lack the closure and satisfaction characteristic of full-length films, which are typically longer than an hour. It is worth noting that these very short movies may predominantly attract dedicated movie enthusiasts, who tend to be more discerning in their assessments. Furthermore, mainstream audiences may not regard films lasting less than one hour as constituting "proper" cinematic experiences. According to the data, it is not advisable to produce "Very Short" movies, although further investigation is warranted to solidify this assertion.

In light of these findings, we can deduce that the optimal duration for achieving the highest ratings, as perceived by the audience, falls within the range of 60 to 119 minutes. This revelation offers an additional metric for evaluating a movie's success from the perspective of its reception by viewers.

## Certificate Analysis
```{r Analysis : Certificate}
movies |> 
  select(certificate_adjusted , genre , gross_CPI_adjusted) |>
  filter(!is.na(certificate_adjusted)) |>
  mutate(as.factor(certificate_adjusted)) |>
  filter(genre == "Action" | genre == "Animation" | genre=="Comedy"|
         genre == "Horror"|genre == "Sci-Fi" | genre =="Thriller" ) |> # filter on certain genres that are more interesting for the analysis 
  group_by(certificate_adjusted , genre) |>
  summarise(Total_gross = sum(gross_CPI_adjusted , na.rm = T ),
            .groups = "keep") |> 
  ggplot(aes( x = genre , y = Total_gross )) + 
    geom_bar(aes(x = genre, fill = factor(certificate_adjusted)),
            position = "dodge",
            stat = "identity") + 
    labs(title = "Certificates for certain genres play a key role for movie\ncredibility.",
         subtitle = "For Horror a certificate around 16+ years is adequate to maximise\nprofits.",
        x = "Genre",
        y = "Total gross by certificate",
        fill = "Certificate")

```

A more detailed examination of specific genres reveals the considerable impact of certificate labels on film success. It becomes evident that a deep understanding of your target audience is paramount when creating movies in particular genres. Some genres are markedly influenced by age labels, not only affecting box office earnings but also shaping audience preferences, particularly in the genres of Action, Horror, Sci-Fi, and Thriller.

In the case of Action films carrying a minimum age label of 12-13, audience expectations gravitate towards more intense and high-quality action sequences, which can serve as a pivotal incentive for individuals to visit movie theaters. Conversely, a movie labeled for all ages (minimum age 0) may not instill the same level of credibility in genres such as Thriller or Action, potentially dissuading audience turnout.

A parallel pattern emerges in the Sci-Fi genre, where a certificate denoting an age range of around 12 years sets the stage for the anticipation of more mature and serious thematic elements. For Horror and Thriller genres, the certificates that yield the most substantial box office returns typically fall within the 16-18 age bracket.

Conversely, age categories spanning from 0 to 7 appear to align seamlessly with the Comedy genre, creating a harmonious fit within a family-friendly environment.

In summation, it becomes apparent that a profound comprehension of the target audience is especially pivotal when crafting films within specific genres. This understanding serves as a fundamental key to unlocking the potential for producing a successful movie, as age certificates significantly shape audience expectations and preferences within various cinematic categories.

## Studio Analysis

Earlier exploratory analysis showed that ratings have declined compared to the early days of Movies. This pattern still persists for all the Studios. We therefore turn our attention to analysing success with respect to gross. 
```{r  first-studio-plot}

movies |> distinct(studio,year,title) |>
group_by(year,studio) |>
mutate(studio = if_else(studio %in% (movies |>
                                    distinct(studio, gross_CPI_adjusted) |>
                                    group_by(studio) |>
                                    summarise(gross_CPI_adjusted = sum(gross_CPI_adjusted, na.rm = TRUE)) |>
                                    arrange(desc(gross_CPI_adjusted)) |>
                                    filter(!is.na(studio)) |>
                                    slice(1:7) |>
                                    select(studio) |> unlist()), studio,"Other"))|>
filter(!is.na(studio)) |>
ggplot(aes(x=year, fill=factor(studio)))+
geom_bar(position = "fill")+
labs(title = "Other Studios Are Starting To Take More Market Share\nIn Terms of Movies Produced",
     subtitle = "Despite the relatively few movies produced by Buena Vista, it maintains spot of top\nGrossing Studios",
     y="Proportion of Movies Produced",
     fill = "Studio")+
theme_minimal()

```


```{r second-studio-plot}

movies |> distinct(studio,year,title,.keep_all = T) |>
  group_by(year,studio) |>
  mutate(studio = if_else(studio %in% (movies |>
                                        distinct(studio, year,gross_CPI_adjusted) |>
                                        group_by(studio) |>
                                        summarise(gross_CPI_adjusted = sum(gross_CPI_adjusted, na.rm = TRUE)) |>
                                        arrange(desc(gross_CPI_adjusted)) |>
                                        filter(!is.na(studio)) |>
                                        dplyr::slice(1:7) |>
                                        select(studio) |> unlist()), studio,"Other")) |>
  filter(!(is.na(studio)|is.na(gross_CPI_adjusted))) |>
  ggplot(aes(x=year, y=gross_CPI_adjusted , fill=factor(studio)))+
  geom_bar(stat = "identity",position = "fill")+
  labs(title = "The Big Studios still dominate in terms of Share of Gross"
         ,y="Proportion of Movies Gross",fill = "Studio") +
  theme_minimal()  



```
However, when paying attention to the amount of gross generated by studios we see that the major studios still have a huge market share in terms of gross.

Summary:
- Decline in Average Rating across all studios from Earlier in the day.
- Big Studios do not generate as many movies in proportion to relatively small ones however they are still producing successful movies when using gross as a metric





Now we break the model into impacts of Genre, Run time, .....nkdfjsdkfjlsddöf



* Answers to the research questions
* Different methods considered
* Competing approaches
* Justifications

Here we analyse the variables we believe have an influence on movie success

## Genre - +geom_smooth()

* Genre

* Run-time (Attention span)

* Budget

For the sake of simplicity, all budgets expressed in a currency different to US$ were omitted. 
The remaining budgets were then adjusted using the consumer price index of their year of release. 

One can notice that both in relative and absolute terms, the return on the investment is the highest for low and very high budget films. 
The following plot explores the profitability of movies by putting the aforementioned budgets in relation with the North American gross. 



```{r first budget plot}

library(ggpubr)

highest_gross_in_class <- movies |> distinct(title, year, .keep_all = TRUE) |> 
  mutate(profit_category = ifelse((budget_CPI_adjusted > gross_CPI_adjusted ), "Loss 1", 
                                  ifelse((2*budget_CPI_adjusted > gross_CPI_adjusted ), "Loss 2", "Profit")) ) |>
  group_by(profit_category) |>
  filter(row_number(desc(gross_CPI_adjusted)) <= 1)



distinct_movies <- sum( ! duplicated( movies |> distinct(title, year, .keep_all = TRUE) ) )
movies_break_even <- sum( ! duplicated( movies |> distinct(title, year, .keep_all = TRUE) |> 
                                          filter(budget_CPI_adjusted < gross_CPI_adjusted ) ) )
movies_2x <- sum( ! duplicated( movies |> distinct(title, year, .keep_all = TRUE) |> 
  filter(2*budget_CPI_adjusted < gross_CPI_adjusted ) ) )

percentage_movies_break_even <- 100 * movies_break_even / distinct_movies

percentage_movies_2x <- 100 * movies_2x / distinct_movies
  
  
x_plot_labels <- paste("$", as.character(seq(0,0.6e9,0.1e9) / 1e9), "B")
y_plot_labels <- paste("$", as.character(seq(0,4.5e9,0.5e9) / 1e9), "B")



p1 <- movies |> distinct(title, year, .keep_all = TRUE) |> 
  mutate(profit_category = 
           ifelse((budget_CPI_adjusted > gross_CPI_adjusted ), "Loss 1", 
                  ifelse((2*budget_CPI_adjusted > gross_CPI_adjusted ), "Loss 2", "Profit")) ) |> 
  ggplot(mapping = aes(x = budget_CPI_adjusted)) + 
  geom_point(aes(y = gross_CPI_adjusted), alpha = 0.25) + 
  geom_line( aes(x = budget_CPI_adjusted , y = budget_CPI_adjusted), color = "red") +
  geom_line( aes(x = budget_CPI_adjusted , y = 2*budget_CPI_adjusted ), color = "green") +
  geom_point(aes(y = gross_CPI_adjusted), size = 3, shape = 1, data = highest_gross_in_class) +
  geom_smooth(aes(y = gross_CPI_adjusted)) +
  ggrepel::geom_label_repel(size = 2, box.padding = unit(0.01, "lines"), aes(y = gross_CPI_adjusted, label = title), data = highest_gross_in_class) + 
  scale_x_continuous(breaks = seq(0,0.6e9,0.1e9), labels = (x_plot_labels))+
  scale_y_continuous(breaks = seq(0,4.5e9,0.5e9), labels = (y_plot_labels))+
  labs(title = "Movies with a higher budget often break even in North America alone",
       subtitle = paste0( as.character(round(percentage_movies_break_even)) ,
                          "% of movies break even in North America and ",
                          as.character(round(percentage_movies_2x)),
                          "% cover the estimated cost of marketing"), 
       x= "CPI Adjusted Budget" , y = "CPI Adjusted North American Gross")+
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 0, hjust=1))



highest_budget_in_class <- movies |> 
  mutate(profit_factor = (gross_CPI_adjusted - budget_CPI_adjusted)/budget_CPI_adjusted ) |> 
  filter(profit_factor < 10 ) |>
  mutate(profit_category = ifelse((budget_CPI_adjusted > gross_CPI_adjusted ), "Loss 1", 
                                  ifelse((2*budget_CPI_adjusted > gross_CPI_adjusted ), "Loss 2", "Profit")) ) |>
  group_by(profit_category) |>
  filter(row_number(desc(budget_CPI_adjusted)) == 1)

excluded_movies <- movies |> distinct(title, year, .keep_all = TRUE) |> 
  filter(budget_CPI_adjusted > 0 ) |>
  mutate(profit_category = 
           ifelse((budget_CPI_adjusted > gross_CPI_adjusted ), "Loss 1", 
                  ifelse((2*budget_CPI_adjusted > gross_CPI_adjusted ), "Loss 2", "Profit")) ) |> 
  mutate(profit_factor = (gross_CPI_adjusted - budget_CPI_adjusted)/budget_CPI_adjusted ) |> 
  filter(profit_factor >= 10 )

number_excluded_movies <- sum( ! duplicated( excluded_movies ) )

max_budget_excluded_movies <- max(excluded_movies$budget_CPI_adjusted)

x_plot_labels <- paste("$", as.character(seq(0,0.6e9,0.1e9) / 1e9), "B")
y_plot_labels <- as.character(seq(-1,10,1.0))

p2 <- movies |> distinct(title, year, .keep_all = TRUE) |> 
  filter(budget_CPI_adjusted > 0 ) |>
  mutate(profit_category = 
           ifelse((budget_CPI_adjusted > gross_CPI_adjusted ), "Loss 1", 
                  ifelse((2*budget_CPI_adjusted > gross_CPI_adjusted ), "Loss 2", "Profit")) ) |> 
  mutate(profit_factor = (gross_CPI_adjusted - budget_CPI_adjusted)/budget_CPI_adjusted ) |> 
  filter(profit_factor < 10 ) |>
  ggplot(mapping = aes(x = budget_CPI_adjusted)) + 
  geom_point(aes(y = profit_factor), alpha = 0.25) + 
  geom_smooth(aes(y = profit_factor), alpha =0) + 
  geom_line( aes(y = 0,  colour = "Without marketing")) +
  geom_line( aes( y = 1 , colour = "With marketing \n equal to budget")) +
  geom_point(aes(y = profit_factor), size = 3, shape = 1, data = highest_budget_in_class) +
  ggrepel::geom_label_repel(size = 2, box.padding = unit(0.01, "lines"), aes(y = profit_factor, label = title), data = highest_budget_in_class) + 
  scale_x_continuous(breaks = seq(0,0.6e9,0.1e9), labels = (x_plot_labels))+
  scale_y_continuous(breaks = seq(-1,10,1.0), labels = (y_plot_labels))+
  labs(title = "Movies with a lower budget are overrepresented among movies with a \n high profit to budget ratio in North America",
       subtitle = paste0("The plot excludes ", 
                         as.character(number_excluded_movies), 
                         "entries with a profit to budget ratio greater than 10, all of which \n have a CPI adjusted budget inferior to $, are omitted", 
                         as.character(round(max_budget_excluded_movies/1000000)),
                         "M"), 
       x= "CPI Adjusted Budget" , y = "Profit to Budget Ratio")+
  scale_color_manual(name = "Break even point", values = c("Without marketing" = "red", "With marketing \n equal to budget" = "green")) + 
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 0, hjust=1))

g1 <- annotate_figure(ggarrange(p1, p2, ncol=2, nrow=1, common.legend = TRUE, legend="bottom"), 
                      top = text_grob("Main Title", 
                                      color = "black", 
                                      size = 12))
g1

```

```{r second budget plot}

d <- movies |> distinct(title, year, .keep_all = TRUE)
averageRating <- mean(d$rating, na.rm=TRUE)
averageMetascore <- mean(d$metascore, na.rm=TRUE)

x_plot_labels <- paste("$", as.character(seq(0,0.6e9,0.1e9) / 1e9), "B")
y_plot_labels <- as.character(seq(0,10,1.0))


test <- movies |> distinct(title, year, .keep_all = TRUE) |> 
  filter(budget_CPI_adjusted > 0 ) |>
  filter(budget_CPI_adjusted < 1e9 )

p1 <- movies |> distinct(title, year, .keep_all = TRUE) |> 
  filter(budget_CPI_adjusted > 0 ) |>
  filter(budget_CPI_adjusted < 1e9 ) |>
  ggplot(mapping = aes(x = budget_CPI_adjusted)) + 
  geom_point(aes(y = rating), alpha = 0.25) + 
  geom_smooth(aes(y = rating), alpha = 0) + 
  geom_line( aes(y = averageRating, colour = "Average rating")) + 
  labs(
    # title = "plchld",
    #    subtitle = "Placeholder subtitle",
       x= "CPI Adjusted Budget" , y = "IMDb rating")+
  scale_color_manual(name = "", values = c("Average rating" = "red")) + 
  scale_x_continuous(breaks = seq(0,0.6e9,0.1e9), labels = (x_plot_labels))+
  scale_y_continuous(limits = c(0,10), breaks = seq(0,10,1.0), labels = (y_plot_labels))+
  theme_minimal()+
  theme(axis.text.x = element_text(angle = 0, hjust=1))

x_plot_labels <- paste("$", as.character(seq(0,0.6e9,0.1e9) / 1e9), "B")
y_plot_labels <- as.character(seq(0,100,10))

p2 <- movies |> distinct(title, year, .keep_all = TRUE) |> 
  filter(budget_CPI_adjusted > 0 ) |>
  filter(budget_CPI_adjusted < 1e9 ) |>
  ggplot(mapping = aes(x = budget_CPI_adjusted)) + 
  geom_point(aes(y = metascore), alpha = 0.25) + 
  geom_smooth(aes(y = metascore), alpha = 0) + 
  geom_line( aes(y = averageMetascore, colour = "Average rating")) + 
  labs(
    # title = "plchld",
    #    subtitle = "Placeholder subtitle",
       x= "CPI Adjusted Budget" , y = "Metascore rating")+
  scale_color_manual(name = "", values = c("Average rating" = "red")) + 
  scale_x_continuous(breaks = seq(0,0.6e9,0.1e9), labels = (x_plot_labels))+
  scale_y_continuous(breaks = seq(0,100,10), labels = (y_plot_labels))+
  theme_minimal()+
  theme(axis.text.x = element_text(angle = 0, hjust=1))


g2 <- annotate_figure(ggarrange(p1, p2, ncol=2, nrow=1, common.legend = TRUE, legend="bottom"), 
                      top = text_grob("IMDb and Metascore ratings follow similar trends with respect to budget increase", 
                                      color = "black", 
                                      size = 12))


g2


```
* Certificate

* Studio

* Director

```{r first director plot}

x_plot_labels <- as.character(seq(0,50,5))
y_plot_labels <- as.character(seq(0,10,1.0))
p <- movies |> distinct(title, year, directors, .keep_all = TRUE) |>
  group_by(directors) |>  
  mutate(rank = map_int(year, ~ sum(.x > year))) |>
  ungroup() |>
  ggplot(mapping = aes(x = rank )) + 
  geom_point(aes(y = rating), alpha = 0.25) + 
  geom_line(aes(y = averageRating), color = "red") +
  geom_smooth(aes(y = rating)) + 
  labs(title = "The average IMDb rating of a given director's movies increases with experience",
       # subtitle = "Placeholder subtitle",
       x= "Number of movies previously directed" , y = "Average IMDb rating")+
  scale_color_manual(name = "", values = c("Average rating" = "red")) + 
  scale_x_continuous(limits = c(0,50), breaks = seq(0,50,5), labels = (x_plot_labels))+
  scale_y_continuous(limits = c(0,10), breaks = seq(0,10,1.0), labels = (y_plot_labels))+
  theme_minimal()+
  theme(axis.text.x = element_text(angle = 0, hjust=1))

p

```

* Actor

```{r first actor plot}

x_plot_labels <- as.character(seq(0,65,5))
y_plot_labels <- as.character(seq(0,10,1.0))
p <- movies |> distinct(title, year, stars, .keep_all = TRUE) |>
  group_by(stars) |> 
  summarise(avgRating = mean(rating, na.rm=TRUE), 
            avgMetascore  = mean(metascore, na.rm=TRUE), 
            appearances= n(), 
            careerLength = max(year, na.rm=TRUE) - min(year, na.rm=TRUE) ) |> 
  filter(careerLength < 75) |> #Two persons named tom lewis 
  ggplot(mapping = aes(x = careerLength )) + 
  geom_point(aes(y = avgRating), alpha =0.25) +
  geom_line( aes(y = averageRating, colour = "Average rating" )) + 
  geom_smooth(aes(y = avgRating)) + 
  labs(title = "The yearly average IMDb rating tends to increase with the length \n  of an actor's career",
     # subtitle = "Placeholder subtitle",
     x= "Age of the career" , y = "Average IMDb rating")+
  scale_color_manual(name = "", values = c("Average rating" = "red")) + 
  scale_x_continuous(limits = c(0,65), breaks = seq(0,65,5), labels = (x_plot_labels))+
  scale_y_continuous(limits = c(0,10), breaks = seq(0,10,1.0), labels = (y_plot_labels))+
  theme_minimal()+
  theme(axis.text.x = element_text(angle = 0, hjust=1))

p

```

```{r first actor profit plot}

averageProfit <- mean(d$profit_CPI_adjusted, na.rm=TRUE)

x_plot_labels <- as.character(seq(0,65,5))
y_plot_labels <- paste("$", as.character(seq(-0.25e9,1.0e9,0.1e9) / 1e9), "B")
p <- movies |> distinct(title, year, stars, .keep_all = TRUE) |>
  group_by(stars) |> filter()  |>  
  summarise(avgProfit = mean(profit_CPI_adjusted, na.rm=TRUE), 
            appearances= n(), 
            careerLength = max(year, na.rm=TRUE) - min(year, na.rm=TRUE) ) |> 
  filter(careerLength < 75) |> #Two persons named tom lewis 
  ggplot(mapping = aes(x = careerLength )) + 
  geom_point(aes(y = avgProfit), alpha =0.25) +
  geom_smooth(aes(y = avgProfit), alpha =0 ) +
  geom_line( aes(y = averageProfit, colour = "Average CPI adjusted profit")) + 
  geom_smooth(aes(y = avgProfit )) + 
  labs(title = "The yearly average CPI adjusted profit tends to increase \n with the length of an actor's career",
       subtitle = "Entries with an average CPI adjusted profit over $ 1B are omitted",
       x= "Age of the career" , y = "Average CPI adjusted profit")+
  scale_color_manual(name = "", values = c("Average CPI adjusted profit" = "red")) + 
  scale_x_continuous(limits = c(0,65), breaks = seq(0,65,5), labels = (x_plot_labels))+
  scale_y_continuous(limits = c(-0.25e9,1e9), breaks= seq(-0.25e9,1.0e9,0.1e9), labels = (y_plot_labels))+
  theme_minimal()+
  theme(axis.text.x = element_text(angle = 0, hjust=1))

p

```

```{r second actor profit plot}

x_plot_labels <- as.character(seq(0,65,5))
y_plot_labels <- as.character(seq(-1,10,1))
p <- movies |> mutate(profitRatio = profit_CPI_adjusted/budget_CPI_adjusted)|> 
  distinct(title, year, stars, .keep_all = TRUE) |>
  group_by(stars) |> 
  summarise(avgProfitRatio = mean(profitRatio, na.rm=TRUE), 
            appearances= n(), 
            careerLength = max(year, na.rm=TRUE) - min(year, na.rm=TRUE) ) |> 
  filter(careerLength < 75) |> #Two persons named tom lewis 
  filter(avgProfitRatio < 10 ) |>
  ggplot(mapping = aes(x = careerLength )) + 
  geom_point(aes(y = avgProfitRatio), alpha =0.25) +
  geom_smooth(aes(y = avgProfitRatio), alpha =0.25) +
  geom_line( aes(y = 0,  colour = "Without marketing")) +
  geom_line( aes( y = 1 , colour = "With marketing \n equal to budget")) +
  labs(title = "The yearly average profit to budget ratio tends to increase \n with the length of an actor's career",
       subtitle = "Entries with an average profit to budget ratio greater than 10 are omitted",
       x= "Age of the career" , y = "Average profit to budget ratio")+
  scale_x_continuous(limits = c(0,65), breaks = seq(0,65,5), labels = (x_plot_labels))+
  scale_y_continuous(limits = c(-1,10), breaks= seq(-1,10,1), labels = (y_plot_labels))+
  scale_color_manual(name = "Break even point", values = c("Without marketing" = "red", "With marketing \n equal to budget" = "green")) + 
  theme_minimal()+
  theme(axis.text.x = element_text(angle = 0, hjust=1))

p 

```