# Analysis

```{r, echo = FALSE, message = FALSE}
source(here::here("scripts/setup.R"))
```

## Genre Analysis

We now consider the impact of the genres on Movies. The first plot below already indicates all genres we have in our data set with respect to gross.

```{r Analysis : Genre & Gross, out.width="1800px"}
  movies |>
    mutate(
      genre = if_else(genre=="Musical","MuL",genre),
      genre = if_else(genre!="MuL",substr(genre,1,3),"MuL")) |>
    group_by(genre,year) |>
    summarise(TotalGross = sum(gross_CPI_adjusted , na.rm = T),
              .groups = "keep") |>
    ggplot(aes( x = year, y = TotalGross)) +
      geom_point() +
      geom_smooth(formula = y ~ x,
                  method = "loess") +
      theme(axis.ticks.x = element_blank(),
            axis.text.x=element_blank()) +
      facet_grid(~genre) +
      labs(title = "Current best genres to make a movie in are Action,\nAdventure & Comedy.",
           subtitle = "On the other hand genres like War, History, Music & Sport seem\nto have stagnated / decresed in popularity.",
           x = "Year for each genre (1920-2023)",
          y = "Total Gross") +
    scale_y_continuous(limits = c(0, NA),oob = squish)
```
(Act : Action, Adv : Adventure, Ani : Animation, Bio : Biography, Com : Comedy, Cri : Crime, Dra : Drama, Fam : Family, Fan : Fantasy, Fil : Film-Noir, His : History, Hor : Horror, MuL : Musical, Mus : Music, Mys  Mystery, Rom : Romance, Sci : Sci-Fi, Spo : Sport, Thr : Thriller, Wes : Western)

The graphical representation clearly indicates that Action, Adventure, and Comedy are the most prevalent and lucrative genres within the realm of filmmaking. Consequently, these categories hold great promise for filmmakers seeking commercial success. Conversely, genres such as Horror, Thriller, and Sci-Fi exhibit an emerging popularity and offer studios a promising avenue for exploration.

The genre of Drama, with its intrinsic ability to intermingle with various other genres, naturally mirrors the trends set by these other categories. This adaptability allows it to remain a pertinent genre in alignment with evolving audience preferences.

In examining the less profitable genres, it is discernible that the War genre has witnessed a decline in popularity since the mid-20th century, conceivably due to its waning relevance as a subject matter in contemporary times. In the case of History, it appears that the market has reached a point of saturation, as the vast majority of significant historical events have been exhaustively documented. Genres like Biography and Western, by contrast, occupy a niche space within the cinematic landscape, appealing to a more limited audience segment and consequently offering diminished potential for trending success.

The overarching conclusion drawn from this analysis is that genres such as Action, Adventure, and Comedy notably enhance the prospects of achieving financial success in the realm of filmmaking.

```{r Creating : Runtime Bins dataframe}
Runtime_lenght_bins_df <- movies |> 
  filter(run_time > 0) |>
  mutate(runtime_bins = as.factor(run_time %/% 60)) |>
  mutate(runtime_bins = fct_recode(runtime_bins,
                                   "Very Short" = "0", # up to 59 min
                                   "Short" = "1",      # 60-119 min 
                                   "Average" = "2",    # 120-179 min
                                   "Long" = "3",       # up to 4h 
                                   "Very Long" = "4",  # up to 5h and more...
                                   "Very Long" = "5",
                                   "Very Long" = "6",
                                   "Very Long" = "7")) |>
  select(title , year , run_time , runtime_bins , gross_CPI_adjusted ,
         rating , metascore , genre) |>
  distinct(title , .keep_all = TRUE)
```

```{r Creating : rating_joined_runtime_df}
yearly_avg_rating_df <- Runtime_lenght_bins_df |> 
  select(year,rating,genre) |>
  group_by(year) |>
  summarise(yearly_AVG_rating = mean(rating , na.rm = T))

bin_avg_rating_df<-Runtime_lenght_bins_df |>
  select(runtime_bins,year,rating,genre) |>
  group_by(runtime_bins,year) |>
  summarise(bin_AVG_rating = mean(rating , na.rm = T), 
            .groups = "drop")
# creating the df that has both types of average rating to find out how the trend behaves
rating_joined_runtime_df <- left_join(bin_avg_rating_df , yearly_avg_rating_df,
                               join_by(year)) 

#Creating rating_joined_df_with_genre :
yearly_avg_rating_by_genre <- Runtime_lenght_bins_df |>
  select(year , rating , genre) |>
  group_by(year , genre) |>
  summarise(yearly_AVG_rating = mean(rating , na.rm = T),
            .groups = "drop")

bin_avg_rating_by_genre <- Runtime_lenght_bins_df |>
  select(runtime_bins , year , rating , genre) |>
  group_by(runtime_bins , year , genre) |>
  summarise(bin_AVG_rating = mean(rating , na.rm = T), 
            .groups = "drop")
# creating the df that has both types of average rating & genre to find out how the trend behaves
rating_joined_df_with_genre <- left_join(bin_avg_rating_by_genre , 
                                  yearly_avg_rating_by_genre,
                                  join_by(year , genre)) 
```

```{r Analysis : Rating deviation trend}
suppressWarnings({print(
  rating_joined_df_with_genre |>
  group_by(runtime_bins,genre,year) |>
  #filter(genre != "Western"& genre !="Thriller" & genre !="Crime",genre !="Drama",genre !="Family",genre !="Biography", genre !="Musical") |>
  summarise(AVG_rating_excl_trend = yearly_AVG_rating - bin_AVG_rating,
            .groups = "keep") |>
  ggplot(aes( x = year , y = AVG_rating_excl_trend)) +
    geom_smooth(aes(color = genre), se =FALSE,
                formula = y ~ x, method = "loess") +
    labs(title = "Could attention span be the reason of the decrese in ratings ?",
    subtitle = "Action, Adventure & Comedy seem to rise again. Sci-Fi, Romance \n& Mystery remained constant.",
         x = "Year",
         y = "Average rating deviation trend",
         color = "Genre") +
    coord_cartesian(xlim = c(1915 , 2025)) +
    scale_x_continuous(breaks = seq(1915 , 2025 , 6)) +
    theme(axis.text.x = element_text(angle = 45, hjust = 1),
          legend.position = "bottom")
)})
# suppressing warnings with regards to geom_smooth
```
Since ratings had decreased over time we had to remove the downward trend. We do so by subtracting the average rating of the year from the genre's average rating referred to as (average rating deviation).

This graphic provides an illustrative depiction of the annual average rating deviation from the normative rating associated with specific run-time intervals. Notably, there has been a discernible decline in movie ratings since the 1970s. This decline may be attributed to a variety of factors, such as a decreasing collective attention span or elevated expectations regarding the optimal duration of a movie.

This intriguing trend is pervasive across multiple genres, with adventure and comedy experiencing a resurgence in recent years. This resurgence is in alignment with our prior observations when assessing genre-specific profitability trends.

In contrast, genres such as Sci-Fi, Mystery, and Romance have maintained a consistent trajectory over the years. One plausible explanation for this constancy is the niche appeal of these genres, catering to dedicated fan bases with specific expectations regarding both content and duration. As a result, these genres tend to exhibit more stability in their ratings over time.

## Run time Analysis

```{r Analysis : Attention span}
rating_joined_runtime_df |>
  group_by(runtime_bins,year) |>
  summarise(AVG_rating_excl_trend = yearly_AVG_rating - bin_AVG_rating,
            .groups = "keep") |>
  ggplot(aes( x = year , y = AVG_rating_excl_trend)) +
    geom_point(aes(shape = runtime_bins,
                   color = runtime_bins)) +
    geom_smooth(aes(color = runtime_bins), se =FALSE,
                formula = y ~ x,
                method = "loess") +
    labs(title = "Attention span seem to decrese over time.",
         subtitle = "Films between 60 to 120 min seem to have gained popularity.",
         x = "Year",
         y = "Average Rating Excluding the trend",
         color = "Run time",
         shape = "Run time") +
    coord_cartesian(xlim = c(1915 , 2025)) +
    scale_x_continuous(breaks = seq(1915 , 2025 , 6)) +
    theme(axis.text.x = element_text(angle = 45, hjust=1),
          legend.position = "bottom")
```
("Very Short" : 0-59min, "Short" : 60-119min, "Average" : 120-179min, "Long" : 180-239min, "Very Long" : 4h & more )

Upon eliminating the influence of rating trend deviations, a more evident pattern emerges. Notably, the majority of run-time categories exhibit a negative impact on movie ratings, with one notable exception being the category encompassing movies with a run time falling between 60 and 119 minutes, denoted as "Short" run time in the graphic.

The extensive rating fluctuations observed in very short movies are, in all likelihood, an outcome of overfitting stemming from a limited dataset. Moreover, the persistently negative trend observed in this category from the 1980s onward may be attributed to the audience's perception that such brief cinematic experiences lack the closure and satisfaction characteristic of full-length films, which are typically longer than an hour. It is worth noting that these very short movies may predominantly attract dedicated movie enthusiasts, who tend to be more discerning in their assessments. Furthermore, mainstream audiences may not regard films lasting less than one hour as constituting "proper" cinematic experiences. According to the data, it is not advisable to produce "Very Short" movies, although further investigation is warranted to solidify this assertion.

In light of these findings, we can deduce that the optimal duration for achieving the highest ratings, as perceived by the audience, falls within the range of 60 to 119 minutes. This revelation offers an additional metric for evaluating a movie's success from the perspective of its reception by viewers.

## Certificate Analysis
```{r Analysis : Certificate}
movies |> 
  select(certificate_adjusted , genre , gross_CPI_adjusted) |>
  filter(!is.na(certificate_adjusted)) |>
  mutate(as.factor(certificate_adjusted)) |>
  filter(genre == "Action" | genre == "Animation" | genre=="Comedy"|
         genre == "Horror"|genre == "Sci-Fi" | genre =="Thriller" ) |> # filter on certain genres that are more interesting for the analysis 
  group_by(certificate_adjusted , genre) |>
  summarise(Total_gross = sum(gross_CPI_adjusted , na.rm = T ),
            .groups = "keep") |> 
  ggplot(aes( x = genre , y = Total_gross )) + 
    geom_bar(aes(x = genre, fill = factor(certificate_adjusted)),
            position = "dodge",
            stat = "identity") + 
    labs(title = "Certificates for certain genres play a key role for movie\ncredibility.",
         subtitle = "For Horror a certificate around 16+ years is adequate to maximise\nprofits.",
        x = "Genre",
        y = "Total gross by certificate",
        fill = "Certificate")

```

A more detailed examination of specific genres reveals the considerable impact of certificate labels on film success. It becomes evident that a deep understanding of your target audience is paramount when creating movies in particular genres. Some genres are markedly influenced by age labels, not only affecting box office earnings but also shaping audience preferences, particularly in the genres of Action, Horror, Sci-Fi, and Thriller.

In the case of Action films carrying a minimum age label of 12-13, audience expectations gravitate towards more intense and high-quality action sequences, which can serve as a pivotal incentive for individuals to visit movie theaters. Conversely, a movie labeled for all ages (minimum age 0) may not instill the same level of credibility in genres such as Thriller or Action, potentially dissuading audience turnout.

A parallel pattern emerges in the Sci-Fi genre, where a certificate denoting an age range of around 12 years sets the stage for the anticipation of more mature and serious thematic elements. For Horror and Thriller genres, the certificates that yield the most substantial box office returns typically fall within the 16-18 age bracket.

Conversely, age categories spanning from 0 to 7 appear to align seamlessly with the Comedy genre, creating a harmonious fit within a family-friendly environment.

In summation, it becomes apparent that a profound comprehension of the target audience is especially pivotal when crafting films within specific genres. This understanding serves as a fundamental key to unlocking the potential for producing a successful movie, as age certificates significantly shape audience expectations and preferences within various cinematic categories.

## Studio Analysis

Earlier exploratory analysis revealed that ratings have declined compared to the early days of movies. 
This pattern persists when considering the productions of each studio separately. 
In the recent years, new studios appeared and quickly became responsible for the release of an increasing number of titles. 
This phenomenon is highlighted in the following graph.


```{r  first-studio-plot}

movies |> distinct(studio,year,title) |>
group_by(year,studio) |>
mutate(studio = if_else(studio %in% (movies |>
                                    distinct(studio, gross_CPI_adjusted) |>
                                    group_by(studio) |>
                                    summarise(gross_CPI_adjusted = sum(gross_CPI_adjusted, na.rm = TRUE)) |>
                                    arrange(desc(gross_CPI_adjusted)) |>
                                    filter(!is.na(studio)) |>
                                    slice(1:7) |>
                                    select(studio) |> unlist()), studio,"Other"))|>
filter(!is.na(studio)) |>
ggplot(aes(x=year, fill=factor(studio)))+
geom_bar(position = "fill")+
labs(title = "Other Studios Are Starting To Take More Market Share\nIn Terms of Movies Produced",
     subtitle = "Despite the relatively few movies produced by Buena Vista, it maintains\nspot of top Grossing Studios",
     y="Proportion of Movies Produced",
     fill = "Studio")+
theme_minimal()

```
However, one can put this observation in perspective by confronting it with the gross, one of our metric for the economical success of movies. 
The following plots reveals that older well established studios still have the lion's share of the north american box office.


```{r second-studio-plot}

movies |> distinct(studio,year,title,.keep_all = T) |>
  group_by(year,studio) |>
  mutate(studio = if_else(studio %in% (movies |>
                                        distinct(studio, year,gross_CPI_adjusted) |>
                                        group_by(studio) |>
                                        summarise(gross_CPI_adjusted = sum(gross_CPI_adjusted, na.rm = TRUE)) |>
                                        arrange(desc(gross_CPI_adjusted)) |>
                                        filter(!is.na(studio)) |>
                                        dplyr::slice(1:7) |>
                                        select(studio) |> unlist()), studio,"Other")) |>
  filter(!(is.na(studio)|is.na(gross_CPI_adjusted))) |>
  ggplot(aes(x=year, y=gross_CPI_adjusted , fill=factor(studio)))+
  geom_bar(stat = "identity",position = "fill")+
  labs(title = "The Big Studios still dominate in terms of Share of Gross"
         ,y="Proportion of Movies Gross",fill = "Studio") +
  theme_minimal()  



```

It is important to note that this trend might be in part due to the lack of disclosure of the performance of movies released exclusively on streaming platforms. 
In absence of standardized reporting practices for these results, this share of the market cannot be accurately studied in terms of gross.

Summary:
- Decline in Average Rating across all studios from Earlier in the day.
- Big Studios do not generate as many movies in proportion to relatively small ones however they are still producing successful movies when using gross as a metric


## Budget Analysis

For the sake of simplicity, all budgets expressed in a currency different to US$ were omitted. 
The remaining budgets were then adjusted using the consumer price index of their year of release. 

One can notice that both in relative and absolute terms, the return on the investment is the highest for low and very high budget films. 
The following plot explores the profitability of movies by putting the aforementioned budgets in relation with the North American gross. 
In order to more accurately reflect the profitability problematics specific to the film industry, we use a crude estimate of the costs not accounted for in the budget of a movie as matching the budget itself. 

In particular, 30% of movies break even and 17% cover these marketing costs from their exploitation in North America alone. The rightmost plot excludes 221 entries with a profit to budget ratio superior to 10, all of which have a CPI adjusted budget inferior to $ 84M. 



```{r first budget plot}

library(ggpubr)

highest_gross_in_class <- movies |> distinct(title, year, .keep_all = TRUE) |> 
  mutate(profit_category = ifelse((budget_CPI_adjusted > gross_CPI_adjusted ), "Loss 1", 
                                  ifelse((2*budget_CPI_adjusted > gross_CPI_adjusted ), "Loss 2", "Profit")) ) |>
  group_by(profit_category) |>
  filter(row_number(desc(gross_CPI_adjusted)) <= 1)



distinct_movies <- sum( ! duplicated( movies |> distinct(title, year, .keep_all = TRUE) ) )
movies_break_even <- sum( ! duplicated( movies |> distinct(title, year, .keep_all = TRUE) |> 
                                          filter(budget_CPI_adjusted < gross_CPI_adjusted ) ) )
movies_2x <- sum( ! duplicated( movies |> distinct(title, year, .keep_all = TRUE) |> 
  filter(2*budget_CPI_adjusted < gross_CPI_adjusted ) ) )

percentage_movies_break_even <- 100 * movies_break_even / distinct_movies

percentage_movies_2x <- 100 * movies_2x / distinct_movies
  
  
x_plot_labels <- paste("$", as.character(seq(0,0.6e9,0.1e9) / 1e9), "B")
y_plot_labels <- paste("$", as.character(seq(0,4.5e9,0.5e9) / 1e9), "B")



p1 <- movies |> distinct(title, year, .keep_all = TRUE) |> 
  mutate(profit_category = 
           ifelse((budget_CPI_adjusted > gross_CPI_adjusted ), "Loss 1", 
                  ifelse((2*budget_CPI_adjusted > gross_CPI_adjusted ), "Loss 2", "Profit")) ) |> 
  ggplot(mapping = aes(x = budget_CPI_adjusted)) + 
  geom_point(aes(y = gross_CPI_adjusted), alpha = 0.25) + 
  geom_line( aes(x = budget_CPI_adjusted , y = budget_CPI_adjusted), color = "red") +
  geom_line( aes(x = budget_CPI_adjusted , y = 2*budget_CPI_adjusted ), color = "green") +
  geom_point(aes(y = gross_CPI_adjusted), size = 3, shape = 1, data = highest_gross_in_class) +
  geom_smooth(aes(y = gross_CPI_adjusted), method = 'gam',  formula = y ~ s(x, bs = "cs")) +
  ggrepel::geom_label_repel(size = 2, box.padding = unit(0.01, "lines"), aes(y = gross_CPI_adjusted, label = title), data = highest_gross_in_class) + 
  scale_x_continuous(breaks = seq(0,0.6e9,0.1e9), labels = (x_plot_labels))+
  scale_y_continuous(breaks = seq(0,4.5e9,0.5e9), labels = (y_plot_labels))+
  labs(x= "CPI Adjusted Budget" , y = "CPI Adjusted North American Gross")+
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 0, hjust=1))



highest_budget_in_class <- movies |> 
  mutate(profit_factor = (gross_CPI_adjusted - budget_CPI_adjusted)/budget_CPI_adjusted ) |> 
  filter(profit_factor < 10 ) |>
  mutate(profit_category = ifelse((budget_CPI_adjusted > gross_CPI_adjusted ), "Loss 1", 
                                  ifelse((2*budget_CPI_adjusted > gross_CPI_adjusted ), "Loss 2", "Profit")) ) |>
  group_by(profit_category) |>
  filter(row_number(desc(budget_CPI_adjusted)) == 1)

excluded_movies <- movies |> distinct(title, year, .keep_all = TRUE) |> 
  filter(budget_CPI_adjusted > 0 ) |>
  mutate(profit_category = 
           ifelse((budget_CPI_adjusted > gross_CPI_adjusted ), "Loss 1", 
                  ifelse((2*budget_CPI_adjusted > gross_CPI_adjusted ), "Loss 2", "Profit")) ) |> 
  mutate(profit_factor = (gross_CPI_adjusted - budget_CPI_adjusted)/budget_CPI_adjusted ) |> 
  filter(profit_factor >= 10 )

number_excluded_movies <- sum( ! duplicated( excluded_movies ) )

max_budget_excluded_movies <- max(excluded_movies$budget_CPI_adjusted)

x_plot_labels <- paste("$", as.character(seq(0,0.6e9,0.1e9) / 1e9), "B")
y_plot_labels <- as.character(seq(-1,10,1.0))

p2 <- movies |> distinct(title, year, .keep_all = TRUE) |> 
  filter(budget_CPI_adjusted > 0 ) |>
  mutate(profit_category = 
           ifelse((budget_CPI_adjusted > gross_CPI_adjusted ), "Loss 1", 
                  ifelse((2*budget_CPI_adjusted > gross_CPI_adjusted ), "Loss 2", "Profit")) ) |> 
  mutate(profit_factor = (gross_CPI_adjusted - budget_CPI_adjusted)/budget_CPI_adjusted ) |> 
  filter(profit_factor < 10 ) |>
  ggplot(mapping = aes(x = budget_CPI_adjusted)) + 
  geom_point(aes(y = profit_factor), alpha = 0.25) + 
  geom_smooth(aes(y = profit_factor), method = 'gam',  formula = y ~ s(x, bs = "cs")) + 
  geom_line( aes(y = 0,  colour = "Without marketing")) +
  geom_line( aes( y = 1 , colour = "With marketing \n equal to budget")) +
  geom_point(aes(y = profit_factor), size = 3, shape = 1, data = highest_budget_in_class) +
  ggrepel::geom_label_repel(size = 2, box.padding = unit(0.01, "lines"), aes(y = profit_factor, label = title), data = highest_budget_in_class) + 
  scale_x_continuous(breaks = seq(0,0.6e9,0.1e9), labels = (x_plot_labels))+
  scale_y_continuous(breaks = seq(-1,10,1.0), labels = (y_plot_labels))+
  labs( x= "CPI Adjusted Budget" , y = "Profit to Budget Ratio")+
  scale_color_manual(name = "Break even point: ", values = c("Without marketing" = "red", "With marketing \n equal to budget" = "green")) + 
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 0, hjust=1))

g1 <- suppressWarnings( annotate_figure(ggarrange(p1, p2, ncol=2, nrow=1, common.legend = TRUE, legend="bottom"), 
                      top = text_grob("Profitability in both relative and absolute terms is sensitive to the budget", 
                                      color = "black", 
                                      size = 12)))

suppressWarnings(print(g1)) 

```

Then, one can notice that the increase of a movie's budget has a similar impact on both of our critical reception metrics, namely the IMDb rating and the Metascore rating. Again, low and very high budgets movies stand out as they tend to be received more favorably. 

```{r second budget plot}
#|echo: false
#| warning: false
#| error: false

d <- movies |> distinct(title, year, .keep_all = TRUE)
averageRating <- mean(d$rating, na.rm=TRUE)
averageMetascore <- mean(d$metascore, na.rm=TRUE)

x_plot_labels <- paste("$", as.character(seq(0,0.6e9,0.1e9) / 1e9), "B")
y_plot_labels <- as.character(seq(0,10,1.0))


test <- movies |> distinct(title, year, .keep_all = TRUE) |> 
  filter(budget_CPI_adjusted > 0 ) |>
  filter(budget_CPI_adjusted < 1e9 )

p1 <- movies |> distinct(title, year, .keep_all = TRUE) |> 
  filter(budget_CPI_adjusted > 0 ) |>
  filter(budget_CPI_adjusted < 1e9 ) |>
  ggplot(mapping = aes(x = budget_CPI_adjusted)) + 
  geom_point(aes(y = rating), alpha = 0.25) + 
  geom_smooth(aes(y = rating), method = 'gam',  formula = y ~ s(x, bs = "cs")) + 
  geom_line( aes(y = averageRating, colour = "Average rating")) + 
  labs(
    # title = "plchld",
    #    subtitle = "Placeholder subtitle",
       x= "CPI Adjusted Budget" , y = "IMDb rating")+
  scale_color_manual(name = "", values = c("Average rating" = "red")) + 
  scale_x_continuous(breaks = seq(0,0.6e9,0.1e9), labels = (x_plot_labels))+
  scale_y_continuous(limits = c(0,10), breaks = seq(0,10,1.0), labels = (y_plot_labels))+
  theme_minimal()+
  theme(axis.text.x = element_text(angle = 0, hjust=1))

x_plot_labels <- paste("$", as.character(seq(0,0.6e9,0.1e9) / 1e9), "B")
y_plot_labels <- as.character(seq(0,100,10))

p2 <- movies |> distinct(title, year, .keep_all = TRUE) |> 
  filter(budget_CPI_adjusted > 0 ) |>
  filter(budget_CPI_adjusted < 1e9 ) |>
  ggplot(mapping = aes(x = budget_CPI_adjusted)) + 
  geom_point(aes(y = metascore), alpha = 0.25) + 
  geom_smooth(aes(y = metascore), method = 'gam',  formula = y ~ s(x, bs = "cs")) + 
  geom_line( aes(y = averageMetascore, colour = "Average rating")) + 
  labs(
    # title = "plchld",
    #    subtitle = "Placeholder subtitle",
       x= "CPI Adjusted Budget" , y = "Metascore rating")+
  scale_color_manual(name = "", values = c("Average rating" = "red")) + 
  scale_x_continuous(breaks = seq(0,0.6e9,0.1e9), labels = (x_plot_labels))+
  scale_y_continuous(breaks = seq(0,100,10), labels = (y_plot_labels))+
  theme_minimal()+
  theme(axis.text.x = element_text(angle = 0, hjust=1))


g2 <- suppressWarnings(annotate_figure(ggarrange(p1, p2, ncol=2, nrow=1, common.legend = TRUE, legend="bottom"), 
                      top = text_grob("IMDb and Metascore ratings generally favor low and very high budget movies", 
                                      color = "black", 
                                      size = 12)))


suppressWarnings(print(g2)) 


```
## Director Analysis

In spite of the executive power of studios, directors have a profound impact on movies. 
Several metrics can be used to evaluate said impact, however the number of movies previously directed by directors most closely describes their experience. 
In addition to this, directors of successful films can garner a dedicated audience, thus ensuring a higher success for their future productions. 

The following plot highlights the improvement in the critical receptions of movies as they gain experience, in the form of the average IMDb rating of said movies. 

It is important to note that directors that are given many opportunities to keep directing movies are selected by studios for their performance. 


```{r first director plot}

x_plot_labels <- as.character(seq(0,50,5))
y_plot_labels <- as.character(seq(0,10,1.0))
p <- movies |> distinct(title, year, directors, .keep_all = TRUE) |>
  group_by(directors) |>  
  mutate(rank = map_int(year, ~ sum(.x > year))) |>
  ungroup() |>
  ggplot(mapping = aes(x = rank )) + 
  geom_point(aes(y = rating), alpha = 0.25) + 
  geom_line(aes(y = averageRating), color = "red") +
  geom_smooth(aes(y = rating), method = 'gam',  formula = y ~ s(x, bs = "cs")) + 
  labs(title = "The average IMDb rating of a given director's movies increases\nwith their experience",
       # subtitle = "Placeholder subtitle",
       x= "Number of movies previously directed" , y = "Average IMDb rating")+
  scale_color_manual(name = "", values = c("Average rating" = "red")) + 
  scale_x_continuous(limits = c(0,50), breaks = seq(0,50,5), labels = (x_plot_labels))+
  scale_y_continuous(limits = c(0,10), breaks = seq(0,10,1.0), labels = (y_plot_labels))+
  theme_minimal()+
  theme(axis.text.x = element_text(angle = 0, hjust=1))

suppressWarnings(print(p)) 

```

## Star Analysis

Stars are a determining factor in the success of a film. Indeed, both their performance and their appeal to the public have a significant impact on the popularity of a movie. 
With experience, the skills of actors can improve and their following can grow. 
As a consequence, as their career are prolonged, one can notice that the average critical reception of the movies they star in improves. 

However, this increase is also in part a result of the selection of succesful stars by directors and studios. 


```{r first actor plot}

x_plot_labels <- as.character(seq(0,65,5))
y_plot_labels <- as.character(seq(0,10,1.0))
p <- movies |> distinct(title, year, stars, .keep_all = TRUE) |>
  group_by(stars) |> 
  summarise(avgRating = mean(rating, na.rm=TRUE), 
            avgMetascore  = mean(metascore, na.rm=TRUE), 
            appearances= n(), 
            careerLength = max(year, na.rm=TRUE) - min(year, na.rm=TRUE) ) |> 
  filter(careerLength < 75) |> #Two persons named tom lewis 
  ggplot(mapping = aes(x = careerLength )) + 
  geom_point(aes(y = avgRating), alpha =0.25) +
  geom_line( aes(y = averageRating, colour = "Average rating" )) + 
  geom_smooth(aes(y = avgRating), method = 'gam', formula = y ~ s(x, bs = "cs")) + 
  labs(title = "The critical reception of stars' movies tends to increase with the\nlength of their career",
     # subtitle = "Placeholder subtitle",
     x= "Years into the career" , y = "Average IMDb rating")+
  scale_color_manual(name = "", values = c("Average rating" = "red")) + 
  scale_x_continuous(limits = c(0,65), breaks = seq(0,65,5), labels = (x_plot_labels))+
  scale_y_continuous(limits = c(0,10), breaks = seq(0,10,1.0), labels = (y_plot_labels))+
  theme_minimal()+
  theme(axis.text.x = element_text(angle = 0, hjust=1))

suppressWarnings(print(p)) 

```

Analysing the absolute profit as a funciton of the length of the career of its stars reveal that well established stars with long careers tends to impact it positively.

```{r first actor profit plot}

averageProfit <- mean(d$profit_CPI_adjusted, na.rm=TRUE)

x_plot_labels <- as.character(seq(0,65,5))
y_plot_labels <- paste("$", as.character(seq(-0.25e9,1.0e9,0.1e9) / 1e9), "B")
p <- movies |> distinct(title, year, stars, .keep_all = TRUE) |>
  group_by(stars) |> filter()  |>  
  summarise(avgProfit = mean(profit_CPI_adjusted, na.rm=TRUE), 
            appearances= n(), 
            careerLength = max(year, na.rm=TRUE) - min(year, na.rm=TRUE) ) |> 
  filter(careerLength < 75) |> #Two persons named tom lewis 
  ggplot(mapping = aes(x = careerLength )) + 
  geom_point(aes(y = avgProfit), alpha =0.25) +
  geom_smooth(aes(y = avgProfit), method = 'gam', formula = y ~ s(x, bs = "cs")) +
  geom_line( aes(y = averageProfit, colour = "Average CPI adjusted profit")) + 
  labs(title = "The yearly average CPI adjusted profit tends to increase \nwith the length of an actor's career",
       subtitle = "Entries with an average CPI adjusted profit over $ 1B are omitted",
       x= "Age of the career" , y = "Average CPI adjusted profit")+
  scale_color_manual(name = "", values = c("Average CPI adjusted profit" = "red")) + 
  scale_x_continuous(limits = c(0,65), breaks = seq(0,65,5), labels = (x_plot_labels))+
  scale_y_continuous(limits = c(-0.25e9,1e9), breaks= seq(-0.25e9,1.0e9,0.1e9), labels = (y_plot_labels))+
  theme_minimal()+
  theme(axis.text.x = element_text(angle = 0, hjust=1))

suppressWarnings(print(p)) 

```

A similar conclusion can be drawn when considering the effect of the length of the career of its stars on the relative profitability of a movie. 

```{r second actor profit plot}

x_plot_labels <- as.character(seq(0,65,5))
y_plot_labels <- as.character(seq(-1,10,1))
p <- movies |> mutate(profitRatio = profit_CPI_adjusted/budget_CPI_adjusted)|> 
  distinct(title, year, stars, .keep_all = TRUE) |>
  group_by(stars) |> 
  summarise(avgProfitRatio = mean(profitRatio, na.rm=TRUE), 
            appearances= n(), 
            careerLength = max(year, na.rm=TRUE) - min(year, na.rm=TRUE) ) |> 
  filter(careerLength < 75) |> #Two persons named tom lewis 
  filter(avgProfitRatio < 10 ) |>
  ggplot(mapping = aes(x = careerLength )) + 
  geom_point(aes(y = avgProfitRatio), alpha =0.25) +
  geom_smooth(aes(y = avgProfitRatio),  method = 'gam', formula = y ~ s(x, bs = "cs")) +
  geom_line( aes(y = 0,  colour = "Without marketing")) +
  geom_line( aes( y = 1 , colour = "With marketing \n equal to budget")) +
  labs(title = "The yearly average profit to budget ratio tends to increase \n with the length of an actor's career",
       subtitle = "Entries with an average profit to budget ratio greater than 10 are omitted",
       x= "Age of the career" , y = "Average profit to budget ratio")+
  scale_x_continuous(limits = c(0,65), breaks = seq(0,65,5), labels = (x_plot_labels))+
  scale_y_continuous(limits = c(-1,10), breaks= seq(-1,10,1), labels = (y_plot_labels))+
  scale_color_manual(name = "Break even point", values = c("Without marketing" = "red", "With marketing \n equal to budget" = "green")) + 
  theme_minimal()+
  theme(axis.text.x = element_text(angle = 0, hjust=1))

suppressWarnings(print(p)) 

```

## Naive Model
So far we considered movies success as being assessed mostly in relation to gross and rating. One way to view success however is from a profitability stand point. Investors and Studios may argue that for a movie to be successful it has to generate profit. For this particular reason we decided to build a model that aims for predicting successful. We consider a movie that has not generated a loss to be "successful". The model was built using random forest and a series of feature engineered variables and it has revealed that the features that explain successfulness best.


```{r}

model_set <- movies |> 
  distinct(title,year,stars,directors,dob_directors,dob_stars,certificate_adjusted,run_time,gross_CPI_adjusted,budget_CPI_adjusted,
           studio) |>
  mutate(stars_age = year-year(dob_stars),
         directors_age = year-year(dob_directors))|>
  filter(stars_age>0&stars_age<100,directors_age>0&directors_age<100) |>
  group_by(title,dob_directors) |>
  mutate(stars_avg_age = mean(stars_age,na.rm = T),
         directors_avg_age = year-year(dob_directors),
         nr_stars = n()) |>
  ungroup() |>
  group_by(title,dob_stars) |>
  mutate(nr_directors = n()) |>
  ungroup() |>
  select(-dob_stars,-stars_age,-dob_directors,-directors_age) |>
  distinct() |>
  filter(!is.na(gross_CPI_adjusted-budget_CPI_adjusted)) |>
  mutate(is_successful = if_else(gross_CPI_adjusted-budget_CPI_adjusted>0,1,0) |> factor(),
         certificate_adjusted = if_else(is.na(certificate_adjusted),0,certificate_adjusted),
         studio = factor(studio)) |>
  left_join(movies |> 
              distinct(title,studio) |> 
              group_by(studio) |> 
              summarise(nr_movies_p_studio = n()),join_by(studio)) |>
  left_join(movies |> 
              distinct(stars,title) |> 
              group_by(stars) |> 
              summarise(nr_movies_p_stars = n()),join_by(stars)) |>
  left_join(movies |> 
              distinct(directors,title) |> 
              group_by(directors) |> 
              summarise(nr_movies_p_directors = n()),join_by(directors))|>
  #left_join(movies|>distinct(title,year,directors) |>
  #            group_by(directors) |>
  #            mutate(rank = 1+map_int(year,~sum(.x>year,na.rm=T)))|> select(directors,rank,year,title),join_by(directors,year,title)) |>
  select(-gross_CPI_adjusted,-year,-title,-stars,-directors,nr_movies_p_stars)

model_set <- model_set[complete.cases(model_set),]
library(randomForest)

set.seed(123)  # For reproducibility
sample_indices <- sample(nrow(model_set), nrow(model_set) * 0.7)
train_data <- model_set[sample_indices, ]
test_data <- model_set[-sample_indices, ]

response <- "is_successful"
predictors <- c("run_time","certificate_adjusted","budget_CPI_adjusted","directors_avg_age",
                "stars_avg_age", "nr_stars","nr_movies_p_studio","nr_movies_p_directors")

rf_model <- randomForest(
  x = train_data[, predictors],
  y = train_data$is_successful,
  ntree = 100,  # Number of trees in the forest
  mtry = sqrt(length(predictors)),  # Number of features to consider at each split
  importance = TRUE  # Calculate variable importance
)

importance(rf_model)

```




