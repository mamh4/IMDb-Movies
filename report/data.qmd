```{r libraries, echo = FALSE, message = FALSE}
source(here::here("scripts/setup.R"))
#libraries
library(ggplot2)
library(scales) # for comma separators
library(patchwork)
library(dplyr)
library(mgcv) # to predict population between census years
library(magrittr) #for the dot operator
```

# Data

IMDb has been around since 1990 and has a long history of collecting movie ratings and reviews. Over the years, it has built a substantial database of user-contributed content. IMDb makes its rating and review system transparent. Users can see how many people have rated a movie and read individual reviews. This openness adds to its credibility. 

To address our research inquiry, we gathered information from IMDb, specifically from the following [webpage](https://www.imdb.com/search/title/?title_type=feature&num_votes=0,&sort=user_rating,desc&ref_=adv_prv). Subsequently, we enhanced this data set by incorporating data from Wikipedia, the U.S. Bureau of Labor, and the U.S. Census Bureau. We offer a comprehensive presentation of the amalgamated data set below.

TODO: Tables (incl. footnote on gross amount being only US)

As of October 21, 2023, the data set on featured movies comprises a total of 247,739 movie titles. These films have been rated by IMDb users who have registered on the platform. The count of ratings within this data set ranges from just a handful up to millions (<3 million).

```{r cut-off-decision}
# Scrape movies
#source("../scripts/scrapping_functions/scrape_IMDb_movies.R")
#movies <- scrape_movies(n_start=1, n_end=10,min_number_votes = 10000, print_progress = FALSE, return_next_url = FALSE, start_url = 'empty')
load("../data/cleaned_data/full_IMDb_Scrape.Rdata")#data name movies

# set NA number of votes to 0 (Two movies with NA votes from IMDb featured page, however <50 votes on IMDb movie page)
movies[is.na(movies$votes) & movies$title == "Ein Fest fÃ¼rs Leben","votes"] <- 9
movies[is.na(movies$votes) & movies$title == "Building Heaven, Remembering Earth","votes"] <- 16

#Pick a cut-off point
a <- movies |>
  mutate(bin = (votes %/% 250+1)*250 ) |> #bin size of 250
  select(bin,rating) |> 
  group_by(bin) |>
  summarise(avg_rating = mean(rating,na.rm = T)) |>
  ggplot(aes(x=bin,y=avg_rating))+
  labs(title = "A logarithmic trend can be observed after excluding movies\nwith less than 10k votes"
       ,x="Number of Votes", y = "Average Rating") +
  geom_point()+
  geom_smooth()+
  scale_x_continuous(breaks = seq(0,3e6,600000),labels = scales::comma )+
  scale_y_continuous(limits = c(0,10),breaks = seq(0,10,2))+
  theme_minimal()


b <- movies |>
  mutate(bin = (votes %/% 250+1)*250 ) |> #bin size of 250
  select(bin,rating) |> 
  group_by(bin) |>
  summarise(avg_rating = mean(rating,na.rm = T)) |>
  ggplot(aes(x=bin,y=avg_rating))+
  labs(x="Number of Votes", y = "Average Rating") +
  geom_point()+
  geom_point(col="red",data = movies |>
                              mutate(bin = (votes %/% 250+1)*250 ) |> #bin size of 250
                              select(bin,rating) |> 
                              group_by(bin) |>
                              summarise(avg_rating = mean(rating,na.rm = T)) |>
                              filter(bin<=10000))+
  geom_smooth()+
  coord_cartesian(xlim = c(0, 180000))+
  scale_y_continuous(limits = c(0,10),breaks = seq(0,10,2))+
  geom_vline(xintercept = 10000,linetype = "dashed")+
  scale_x_continuous(labels = scales::comma)+
  annotate("text", x = 10000, y = 10, vjust = "top", hjust = "left",
           label = "10k")+
  theme_minimal()
  
(a | b)

```
Conclusion: cut-off at 10k


Now that we decided on the cut-off of 10k we end up with 10,555 movie titles which we try to enrich with information such as the date of births of actors and directors the studio(s) that produced the film and the budget. Since we have movies dating back from 1900s we decided to include the average annual consumer price index and population estimates.


```{r data-enrichment, echo = FALSE, message = FALSE}
# Read other data

movies <- movies |>
  filter(votes>=10000)


# Source relevant scripts
source("../scripts/scrapping_functions/enrich_dob.R")
source("../scripts/scrapping_functions/enrich_studio_and_budget.R")


# Load and aggregate data switch load with functions to try on new data set

#dob_table_stars <- find_dob( movies |> select(stars) |>
#                       separate_rows(stars, sep = ",\\s*")|>
#                       unique())
load("../data/scrapped_data/dob_stars10k.Rdata")#data name dob_table_stars


#dob_table_directors <- find_dob( movies |> select(directors) |>
#                       separate_rows(directors, sep = ",\\s*")
#                       |> unique())
load("../data/scrapped_data/dob_directors10k.Rdata")#data name dob_table_directors


#studio_and_budget <- enrich_studio_and_budget(movies[,c("title","year")])
load("../data/scrapped_data/studio_and_budget10k.Rdata")#data name dob_table_directors


#source("../scripts/cleaning_functions/clean_studio_budget.R")
load("../data/cleaned_data/studio_and_budget10k_cleaned.Rdata")


# Apparently the dot operator needs %>% not yet implemented in base r using |>
CPI <- read.csv("../data/cleaned_data/inflation.csv") %>%
    mutate(CPI = rowMeans(.[,3:14],na.rm=T)) %>%
    select(Year,CPI) %>%
    rbind(data.frame(Year = 2023,CPI = 302.340)) #US Federal Reserve Economic Data

# integrate population data
population <- read.csv("../data/cleaned_data/population.csv")
population_gam <- gam(population~s(census_year),data = population)
predictions <- predict(object = population_gam, newdata = data.frame(census_year = seq(1900, 2023, 1)))
population_estimates <- data.frame(year = seq(1900, 2023, 1),
                                   population = predictions)


#aggregate data + make it TIDY (Split per per Genre, Actor, Director and Studio)
#Warning is due two films "Beast 2022" when doing a left join, we adjust them afterwards.
suppressWarnings({
movies <- movies |> 
  left_join(CPI,join_by(year==Year)) |>
  left_join(studio_and_budget[1:4], join_by(title,year)) |>
  separate_rows(stars, sep = ",\\s*") |>
  left_join(dob_table_stars,join_by(stars)) |>
  separate_rows(directors, sep = ",\\s*") |>
  left_join(dob_table_directors,join_by(directors)) |>
  separate_rows(genre, sep = ",\\s*") |>
  separate_rows(studio, sep = ",\\s*") |>
  left_join(population_estimates, join_by(year))
})

# There are two movies named beast from the year 2022.
movies[movies$title=="Beast" & movies$run_time ==93,"budget"] <- 36e6
movies[movies$title=="Beast" & movies$run_time ==93,"studio"] <- "Universal Pictures"

```


## Motivation for cpi and population
```{r motivation-cpi-population}
a <- ggplot(population_estimates, aes(year, population)) +
  geom_line() +
  scale_y_continuous(labels = scales::comma) +
  labs(title = "Population and CPI Trend Upwards Over Time", x = "Year", y = "Population") +
  theme_minimal()


b <- ggplot(CPI,aes(Year, CPI))+
  geom_line()+
  labs(x = "Year", y = "CPI") +
  theme_minimal()

(a | b)

```


* (new) Data Transformations
- certificate->age dependent
- gross adjusted for inflation (time series to justify why we should account for inflation) 
- Budget adjusted for inflation (time series ,, ,, ,, ...)
- Ticket sold estimate (current ticket price?)


## Motivation for data transformation
To relate our research question as close as possible to the data set we have we construct a few estimates, For instance to answer to question How many views a movie received we can approximate it by number of tickets sold and proportion of population who watched the movie.

Furthermore, we notice discrepancy in the certificate column for instance PG meant that viewers of the age of XX could watch the movie with their parents, but in 19XX this changed to XX of age. Therefore we assign the column factor levels that are age dependent.
```{r transformation-chunk}
#integrate transformations of columns into data set.
todays_CPI <- CPI[CPI$Year==2023,"CPI"]
movies$gross_CPI_adjusted <- (movies$gross / movies$CPI)*todays_CPI
movies$budget_CPI_adjusted <- (movies$budget / movies$CPI)*todays_CPI
ticket_price_23 <- 11.15
movies$nr_tickets_sold <- movies$gross_CPI_adjusted / ticket_price_23

```

