---
title: "Arno"
format: html
editor: visual
---

##########################################################################################################################
##########################################################################################################################
##########################################################################################################################
```{r} 
#loading libraries...

library(tibble)
library(readr)
library(tidyr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(forcats)
library(stringr)
library(tidyverse)
```

```{r}
#load("data/full_movies_v1.RData")
#load("data/cleaned_data/full_IMDb_Scrape.RData")
```

```{r}
#df_cert_clean <- movies |> 
#  mutate(certificate = sub("[\\\n].*",NA, certificate)) |> 
#  select(certificate) |> 
#  group_by(certificate) |> 
#  summarise(count = n())
```


```{r message=TRUE}
movies <- movies |> 
  mutate(certificate = sub("[\\\n].*",NA, certificate)) |> 
  mutate(certificate = as.factor(str_squish(certificate))) |>
  mutate(certificate = fct_recode(certificate, 
                                  "0" = "Approved",
                                  "0" = "G",
                                  "0" = "GP",
                                  "0" = "M",
                                  "0" = "M/PG",
                                  "18" = "NC-17", 
                                  NULL = "Not Rated",
                                  "0" = "PG",
                                  "13" = "PG-13", 
                                  "0" = "Passed",
                                  "R" = "R", # depending on the year of release of the movie the certificate corresponds to a different age, it will be dealt with in a later function.
                                  NULL = "Unrated",
                                  "17" = "X"))
```

```{r}
certificate_to_age <- function(cert, year){
  new_cert_vect = cert # initializing a new vector with the value of certificate
  for (i in 1:length(cert)){
      if(is.na(year[i]) | is.na(cert[i])){next} # skipping to next loop if either value is NA
    
      if(year[i]>=1970 & cert[i] == "R"){ # modifying the certificate value "R" to 17 if the year is above 1970
        new_cert_vect[i]="17"
      }
      else if (year[i]<1970 & cert[i] == "R"){
        new_cert_vect[i]="16"
      }
  }
  return(new_cert_vect)  
}
```


```{r message=TRUE}
movies <- movies |>
  mutate(certificate = certificate_to_age(certificate,year)) 

movies$certificate <- factor( movies$certificate, 
                              levels = c("0", "6", "7", "8", "9", "10", "12", "13", "14", "16", "17", "18", NULL))
                              
#reordering the levels so they are in ascending order.

#cert_df <- movies |> select(certificate) |> group_by(certificate) |> summarise(count = n()) 
```
## Data Explo Section + Analysis on Competition in recent times #####################################################
```{r Competition Inc}
movies |> 
  group_by(year) |>
  ggplot(mapping = aes(x = year, y = )) + geom_bar()

```

## Genre section #####################################################
```{r Genre DF}
# 
# movies_genre_extended <- movies |>
#   separate_rows(genre, sep = ",\\s*") |>
#   mutate(genre = str_squish(genre))
# 
# 
# # genreList <- unique(unlist(strsplit(str_squish(unique(movies$genre) ),"," ))) # to have an idea of the genres in the dataset
```

```{r}
# 
# df_genre_sum <- movies_genre_extended |>
#   group_by(genre) |>
#   filter(n()>=0) |>
#   summarise( counted = sum(n())) |>
#   arrange(counted)
#
#ggplot(data = df_genre_sum,mapping = aes( x = reorder(genre,desc(counted)), y = counted ))+
#  geom_bar(stat = "identity") +
#  labs( x = "Genre",
#        y = "Sum") +
#  annotate("text",8 , 130000, label = "Top Movie Genres", vjust = "top", hjust = "right")
#
# movies_genre_extended |>
#   select(genre,gross) |>
#   group_by(genre) |>
#   summarise(SumGrossByGenre = sum(gross,na.rm=T),
#             counted = sum(n())) |>
#   mutate(MeanGross = SumGrossByGenre/counted) |>
#   #filter(MeanGrossByGenre >= 300000000) |>
#   ggplot( mapping = aes( x = reorder(genre, desc(MeanGross)) , y = MeanGross)) + geom_bar(stat = "identity") + labs( x = "Genre")
  
  
```

## Genre Analysis Section #####################################################

```{r Analysis : Genre}
  movies |>
    #filter(genre != "Adult" & genre != "News" & genre != "Reality-TV" & genre != "Talk-Show") |>
    group_by(genre,year) |>
    summarise(MeanGross = mean(gross_CPI_adjusted,na.rm = T)) |>
    ggplot(aes( x = year, y = MeanGross)) + 
      geom_point() +
      geom_smooth() +
      theme(axis.ticks.x = element_blank(),
            axis.text.x=element_blank()) +
      facet_grid(~genre) +
      labs(title = "Action, Adventure, Fantasy & Sci-Fi, hold the best Gross result in modern times",
           subtitle = "On the other hand genres like War, History, Music & Sport seem to have stagnated", 
           x = "Year for each genre (1920-2023)",
          y = " Mean Gross") +
    scale_y_continuous(limits = c(10,NA),oob = squish)

  


```


```{r Analysis : Genre bis}
suppressWarnings({
  movies |>
    group_by(genre,year) |>
    summarise(TotalGross = sum(gross_CPI_adjusted,na.rm = T), .groups = "keep") |>
    ggplot(aes( x = year, y = TotalGross)) + 
      geom_point() +
      geom_smooth() +
      theme(axis.ticks.x = element_blank(),
            axis.text.x=element_blank()) +
      facet_grid(~genre) +
      labs(title = "Action, Adventure, Fantasy & Comedy, hold the best Gross result in modern times",
           subtitle = "On the other hand genres like War, History, Music & Sport seem to have stagnated / decresed in popularity", 
           x = "Year for each genre (1920-2023)",
          y = "Total Gross") +
    scale_y_continuous(limits = c(10,NA),oob = squish)
})
```


## Attention Span Section ##########################################################################################

```{r} 
# A_span <- movies |>                 # to have an idea of which runtime bins there are & in which proportion
#   filter(run_time >0 ) |>
#   mutate(runtime_bins = run_time %/% 60) |>
#   group_by(runtime_bins) |>
#   summarise(count = n())
```

```{r}
Runtime_Lenght_bins <- movies |> 
  filter(run_time >0) |>
  mutate(runtime_bins = as.factor(run_time %/% 60)) |>
  mutate(runtime_bins = fct_recode(runtime_bins,
                                   "Very Short" = "0", # up to 59 min
                                   "Short" = "1",      # 60-119 min more or less
                                   "Average" = "2",    # up to 3h (120-179min)
                                   "Long" = "3",       # up to 4h (180-239min)
                                   "Very Long" = "4",  # up to 5h and more are categorized as "very long" movies
                                   "Very Long" = "5",
                                   "Very Long" = "6",
                                   "Very Long" = "7")) |>
  select(title,year,run_time,runtime_bins,gross_CPI_adjusted,rating,metascore,votes) |>
  distinct(title, .keep_all = TRUE)
```

```{r}
A_span_2 <- Runtime_Lenght_bins |>                 # to have an idea of which runtime bins there are & in which proportion
  group_by(runtime_bins) |>
  summarise(count = n())

```


```{r}
Runtime_Lenght_bins |>
  select(runtime_bins,year,rating) |>
  group_by(runtime_bins,year) |>
  summarise(AVG_rating = mean(rating, na.rm = T)) |>
  ggplot(aes( x = year , y = AVG_rating)) +
  geom_point(aes(shape = runtime_bins, color = runtime_bins)) +
  geom_smooth(aes(color = runtime_bins), se =FALSE) +
  labs(title = "Attention span seem to decrese in recent years",
       subtitle = "Although long movies seem to generate better ratings in recent years, one must bear in mind\nthat they have the largest standard deviation among the other categories",
       x = "Year",
       y = "Average Rating",
       color = "Runtime Bins",
       shape = "Runtime Bins") +
  coord_cartesian(xlim = c(1915,2025)) +
  scale_x_continuous(breaks = seq(1915,2025,6)) +
  theme(axis.text.x = element_text(angle = 45, hjust=1))

```
```{r}
# movies |> 
#   filter(run_time >0) |>
#   mutate(runtime_bins = as.factor(run_time %/% 60)) |>
#   select(title,year,runtime_bins,gross_CPI_adjusted) |>
#   distinct(title, .keep_all = TRUE) |>
#   select(runtime_bins,year,gross_CPI_adjusted)|>
#   group_by(runtime_bins,year)|>
#   summarise(AVG_gross = mean(gross_CPI_adjusted,na.rm = T))|>
#   ggplot(aes(x = year, y = AVG_gross))+
#   geom_point(aes(shape = runtime_bins, color = runtime_bins))+
#   geom_smooth(aes(color = runtime_bins), se =FALSE) +
#   labs(title = "Short & average lenght films have slight increase in gross each year",
#        subtitle = "Long movies have the most potential, but it is either a hit or a miss",
#        x = "Year",
#        y = "Average Gross",
#        color = "Runtime Bins",
#        shape = "Runtime Bins") +
#   coord_cartesian(xlim = c(1900,2025), ylim = c(-10,3.5e+08))
# ggplot(data = Runtime_Lenght_df , mapping = aes( x = Runtime_bins , y = gross, color = year )) +
#   geom_point()
# Runtime_Lenght_bins |> 
#   select(runtime_bins,year,gross_CPI_adjusted,votes) |>
#   group_by(runtime_bins,year) |>
#   summarise(avggross = mean(gross_CPI_adjusted,na.rm = T),
#             avgvotes = mean(votes)) |>
#   ggplot(aes(x = year , y = avgvotes)) +
#   geom_point() + geom_smooth() +
#   facet_grid(~runtime_bins)

```

```{r}
Runtime_Lenght_bins_90_180min <- movies |> 
  filter(run_time >90 & run_time <= 180) |>
  mutate(runtime_bins = as.factor((run_time-90) %/% 30)) |>
  mutate(runtime_bins = fct_recode(runtime_bins,
                                   "90-119" = "0",    #  less than 2h
                                   "120-149" = "1",    # 2h-3h more or less
                                   "150-180" = "2",
                                   "150-180" = "3"))    # up to 3h (180min)
                                   
# In dept analysis on movies with runtimes between 90 & 180 mins...

Runtime_Lenght_bins_90_180min |>
  select(runtime_bins,year,gross_CPI_adjusted) |>
  group_by(runtime_bins,year) |>
  summarise(AVG_gross = mean(gross_CPI_adjusted, na.rm = T)) |>
  filter(AVG_gross>=0) |>
  ggplot(aes( x = year , y = AVG_gross)) +
  geom_point(aes(shape = runtime_bins, color = runtime_bins))+
  geom_smooth(aes(color = runtime_bins), se =FALSE) +
  labs(title = "Taking a closer look on movies with lenght 100-180min",
       subtitle = "Safe bet would be arround 130min, it has the lowest standard error",
       x = "Year",
       y = "Average Gross",
       color = "Runtime Bins",
       shape = "Runtime Bins") +
  annotate("text",x = 1970, y = 7e+08, vjust = "top", hjust = "center", label = "Correlation between lenght & gross volatility
           seem to play a role for movies" ) +
  coord_cartesian(xlim = c(1915,2025), ylim = c(0,3.3e+08)) +
  scale_x_continuous(breaks = seq(1915,2025,6)) +
  theme(axis.text.x = element_text(angle = 45, hjust=1))
```




## Certificate Section #####################################################

certificate / genre / gross ?? For which cert is the most appropriate gross wise / rating wise / ...
```{r}
movies |> 
  select(certificate,genre,gross_CPI_adjusted,rating,votes) |>
  filter(!is.na(certificate)) |>
  filter(genre == "Action"|genre == "Animation"|genre == "Horror"|genre == "Sci-Fi" |genre =="Thriller")|>
  group_by(certificate,genre) |>
  summarise(Total_gross = sum(gross_CPI_adjusted,na.rm = T )) |> 
  ggplot(aes( x = genre , y = Total_gross )) + 
  geom_bar(aes(x = genre, fill = certificate), position = "dodge", stat = "identity") + 
  labs( title = "Certificates for certain genres play a key role",
        subtitle = "For Horror a certificate around 16+ years is adequate to maximise profits",
        x = "Genre",
        y = "Total gross by certificate")
```

```{r}
# movies |> 
#   select(certificate,genre,gross_CPI_adjusted,rating,votes) |>
#   
#   group_by(certificate,genre) |>
#   summarise(Big_rating = mean(rating,na.rm = T )) |> # counts the number of movies that got a gross bigger than 2M
#   filter(!is.na(certificate)) |>
#   ggplot(aes( x = genre , y = Big_rating )) + 
#   geom_bar(aes(x = genre, fill = certificate), position = "dodge", stat = "identity")
  
```


#### X Section 

```{r}
df_directors <- movies |>
  separate_rows(directors, sep = ",\\s*") |>
  mutate(directors = str_squish(directors)) |>
  filter(votes >= 900000 & rating >= 7.7 & gross >= 10000000)
```

```{r}
df_directors |>
  separate_rows(genre, sep = ",\\s*") |>
  mutate(genre = str_squish(genre)) |>
  select(directors,gross,genre) |>
  group_by(directors,genre) |>
  ggplot(aes( x = directors, y= gross)) +
  geom_bar(aes( x = directors, fill = genre))
```
